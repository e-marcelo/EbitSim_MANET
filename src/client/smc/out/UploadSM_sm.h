//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : UploadSM.sm
//

#ifndef UPLOADSM_SM_H
#define UPLOADSM_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class UploadMap;
class UploadMap_Stopped;
class UploadMap_NotInterestingChoking;
class UploadMap_InterestingChoking;
class UploadMap_NotInterestingUnchoking;
class UploadMap_InterestingUnchoking;
class UploadMap_Default;
class UploadSMState;
class UploadSMContext;
class PeerWireThread;
class RequestMsg;
class CancelMsg;

class UploadSMState :
    public statemap::State
{
public:

    UploadSMState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(UploadSMContext&) {};
    virtual void Exit(UploadSMContext&) {};

    virtual void cancelMsg(UploadSMContext& context, CancelMsg const& msg);
    virtual void chokePeer(UploadSMContext& context);
    virtual void interestedMsg(UploadSMContext& context);
    virtual void notInterestedMsg(UploadSMContext& context);
    virtual void requestMsg(UploadSMContext& context, RequestMsg const& msg);
    virtual void sendPieceMsg(UploadSMContext& context);
    virtual void startMachine(UploadSMContext& context);
    virtual void stopMachine(UploadSMContext& context);
    virtual void unchokePeer(UploadSMContext& context);
    virtual void uploadRateTimer(UploadSMContext& context);

protected:

    virtual void Default(UploadSMContext& context);
};

class UploadMap
{
public:

    static UploadMap_Stopped Stopped;
    static UploadMap_NotInterestingChoking NotInterestingChoking;
    static UploadMap_InterestingChoking InterestingChoking;
    static UploadMap_NotInterestingUnchoking NotInterestingUnchoking;
    static UploadMap_InterestingUnchoking InterestingUnchoking;
};

class UploadMap_Default :
    public UploadSMState
{
public:

    UploadMap_Default(const char * const name, const int stateId)
    : UploadSMState(name, stateId)
    {};

    virtual void sendPieceMsg(UploadSMContext& context);
    virtual void stopMachine(UploadSMContext& context);
    virtual void uploadRateTimer(UploadSMContext& context);
};

class UploadMap_Stopped :
    public UploadMap_Default
{
public:
    UploadMap_Stopped(const char * const name, const int stateId)
    : UploadMap_Default(name, stateId)
    {};

    virtual void Entry(UploadSMContext&);
    virtual void Default(UploadSMContext& context);
    virtual void startMachine(UploadSMContext& context);
};

class UploadMap_NotInterestingChoking :
    public UploadMap_Default
{
public:
    UploadMap_NotInterestingChoking(const char * const name, const int stateId)
    : UploadMap_Default(name, stateId)
    {};

    virtual void Entry(UploadSMContext&);
    virtual void interestedMsg(UploadSMContext& context);
    virtual void unchokePeer(UploadSMContext& context);
};

class UploadMap_InterestingChoking :
    public UploadMap_Default
{
public:
    UploadMap_InterestingChoking(const char * const name, const int stateId)
    : UploadMap_Default(name, stateId)
    {};

    virtual void Entry(UploadSMContext&);
    virtual void notInterestedMsg(UploadSMContext& context);
    virtual void requestMsg(UploadSMContext& context, RequestMsg const& msg);
    virtual void unchokePeer(UploadSMContext& context);
};

class UploadMap_NotInterestingUnchoking :
    public UploadMap_Default
{
public:
    UploadMap_NotInterestingUnchoking(const char * const name, const int stateId)
    : UploadMap_Default(name, stateId)
    {};

    virtual void Entry(UploadSMContext&);
    virtual void chokePeer(UploadSMContext& context);
    virtual void interestedMsg(UploadSMContext& context);
};

class UploadMap_InterestingUnchoking :
    public UploadMap_Default
{
public:
    UploadMap_InterestingUnchoking(const char * const name, const int stateId)
    : UploadMap_Default(name, stateId)
    {};

    virtual void Entry(UploadSMContext&);
    virtual void Exit(UploadSMContext&);
    virtual void cancelMsg(UploadSMContext& context, CancelMsg const& msg);
    virtual void chokePeer(UploadSMContext& context);
    virtual void notInterestedMsg(UploadSMContext& context);
    virtual void requestMsg(UploadSMContext& context, RequestMsg const& msg);
    virtual void sendPieceMsg(UploadSMContext& context);
    virtual void stopMachine(UploadSMContext& context);
    virtual void uploadRateTimer(UploadSMContext& context);
};

class UploadSMContext :
    public statemap::FSMContext
{
public:

    explicit UploadSMContext(PeerWireThread& owner)
    : FSMContext(UploadMap::Stopped),
      _owner(owner)
    {};

    UploadSMContext(PeerWireThread& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline PeerWireThread& getOwner()
    {
        return (_owner);
    };

    inline UploadSMState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<UploadSMState&>(*_state);
    };

    inline void cancelMsg(CancelMsg const& msg)
    {
        setTransition("cancelMsg");
        getState().cancelMsg(*this, msg);
        setTransition(NULL);
    };

    inline void chokePeer()
    {
        setTransition("chokePeer");
        getState().chokePeer(*this);
        setTransition(NULL);
    };

    inline void interestedMsg()
    {
        setTransition("interestedMsg");
        getState().interestedMsg(*this);
        setTransition(NULL);
    };

    inline void notInterestedMsg()
    {
        setTransition("notInterestedMsg");
        getState().notInterestedMsg(*this);
        setTransition(NULL);
    };

    inline void requestMsg(RequestMsg const& msg)
    {
        setTransition("requestMsg");
        getState().requestMsg(*this, msg);
        setTransition(NULL);
    };

    inline void sendPieceMsg()
    {
        setTransition("sendPieceMsg");
        getState().sendPieceMsg(*this);
        setTransition(NULL);
    };

    inline void startMachine()
    {
        setTransition("startMachine");
        getState().startMachine(*this);
        setTransition(NULL);
    };

    inline void stopMachine()
    {
        setTransition("stopMachine");
        getState().stopMachine(*this);
        setTransition(NULL);
    };

    inline void unchokePeer()
    {
        setTransition("unchokePeer");
        getState().unchokePeer(*this);
        setTransition(NULL);
    };

    inline void uploadRateTimer()
    {
        setTransition("uploadRateTimer");
        getState().uploadRateTimer(*this);
        setTransition(NULL);
    };

private:
    PeerWireThread& _owner;
};


#endif // UPLOADSM_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
